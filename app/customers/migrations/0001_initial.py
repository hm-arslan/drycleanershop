# Generated by Django 5.2.5 on 2025-09-11 12:03

import core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerAddress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('home', 'Home'), ('work', 'Work'), ('other', 'Other')], default='home', max_length=20)),
                ('label', models.CharField(help_text="Address label (e.g., 'Main Office', 'Home')", max_length=50, validators=[core.validators.validate_safe_string, core.validators.validate_no_special_chars])),
                ('street_address', models.CharField(help_text='Street address', max_length=255, validators=[core.validators.validate_safe_string])),
                ('apartment_unit', models.CharField(blank=True, help_text='Apartment, suite, or unit number', max_length=50, validators=[core.validators.validate_safe_string])),
                ('city', models.CharField(help_text='City', max_length=100, validators=[core.validators.validate_safe_string, core.validators.validate_no_special_chars])),
                ('state', models.CharField(help_text='State or province', max_length=50, validators=[core.validators.validate_safe_string, core.validators.validate_no_special_chars])),
                ('postal_code', models.CharField(help_text='ZIP or postal code', max_length=20, validators=[core.validators.validate_safe_string])),
                ('country', models.CharField(default='USA', max_length=100, validators=[core.validators.validate_safe_string, core.validators.validate_no_special_chars])),
                ('is_default', models.BooleanField(default=False, help_text='Use as default address')),
                ('pickup_instructions', models.TextField(blank=True, help_text='Special pickup/delivery instructions', validators=[core.validators.validate_safe_string])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-is_default', 'label'],
                'indexes': [models.Index(fields=['customer', 'is_default'], name='customers_c_custome_c36b5c_idx'), models.Index(fields=['type'], name='customers_c_type_d73496_idx'), models.Index(fields=['is_active'], name='customers_c_is_acti_83de47_idx')],
                'unique_together': {('customer', 'label')},
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, help_text="Customer's date of birth", null=True)),
                ('preferred_name', models.CharField(blank=True, help_text='How the customer prefers to be addressed', max_length=50, validators=[core.validators.validate_safe_string, core.validators.validate_no_special_chars])),
                ('emergency_contact_name', models.CharField(blank=True, help_text='Emergency contact person', max_length=100, validators=[core.validators.validate_safe_string])),
                ('emergency_contact_phone', models.CharField(blank=True, help_text='Emergency contact phone number', max_length=20, validators=[core.validators.validate_phone_number])),
                ('preferred_pickup_type', models.CharField(choices=[('drop_off', 'Drop Off'), ('pickup', 'Pickup Service')], default='drop_off', help_text='Default pickup preference', max_length=20)),
                ('preferred_communication', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('phone', 'Phone Call'), ('app', 'App Notification')], default='email', help_text='Preferred communication method', max_length=20)),
                ('special_instructions', models.TextField(blank=True, help_text='Special handling instructions or notes', validators=[core.validators.validate_safe_string])),
                ('loyalty_points', models.IntegerField(default=0, help_text='Current loyalty points balance')),
                ('membership_tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', help_text='Current membership tier', max_length=20)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount spent by customer', max_digits=10)),
                ('first_order_date', models.DateTimeField(blank=True, help_text='Date of first order', null=True)),
                ('last_order_date', models.DateTimeField(blank=True, help_text='Date of most recent order', null=True)),
                ('total_orders', models.IntegerField(default=0, help_text='Total number of orders placed')),
                ('average_order_value', models.DecimalField(decimal_places=2, default=0.0, help_text='Average order value', max_digits=8)),
                ('email_marketing', models.BooleanField(default=True, help_text='Receive marketing emails')),
                ('sms_marketing', models.BooleanField(default=False, help_text='Receive marketing SMS')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['membership_tier'], name='customers_c_members_616d47_idx'), models.Index(fields=['total_spent'], name='customers_c_total_s_0cb95f_idx'), models.Index(fields=['loyalty_points'], name='customers_c_loyalty_190d7d_idx'), models.Index(fields=['is_active'], name='customers_c_is_acti_835548_idx')],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('earned', 'Points Earned'), ('redeemed', 'Points Redeemed'), ('expired', 'Points Expired'), ('bonus', 'Bonus Points'), ('adjustment', 'Manual Adjustment')], max_length=20)),
                ('points', models.IntegerField(help_text='Points amount (positive for earned, negative for redeemed)')),
                ('description', models.CharField(help_text='Description of the transaction', max_length=200, validators=[core.validators.validate_safe_string])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When these points expire (if applicable)', null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_transactions', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='loyalty_transactions', to='orders.order')),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_loyalty_transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['customer', 'type'], name='customers_l_custome_799a0d_idx'), models.Index(fields=['created_at'], name='customers_l_created_40bd41_idx'), models.Index(fields=['expires_at'], name='customers_l_expires_175fd5_idx')],
            },
        ),
    ]
