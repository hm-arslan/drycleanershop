name: Deploy to VPS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        cp .env.example .env
        sed -i 's/your-secret-key-here/test-secret-key-for-testing-only/' .env
        sed -i 's/your-db-password-here/test_password/' .env
        sed -i 's/your-root-password-here/test_password/' .env
        sed -i 's/db/127.0.0.1/' .env
        sed -i 's/DEBUG=False/DEBUG=True/' .env

    - name: Run migrations
      run: |
        cd app
        python manage.py migrate

    - name: Run tests
      run: |
        cd app
        python manage.py test

    - name: Check Django deployment readiness
      run: |
        cd app
        python manage.py check --deploy

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/drycleanershop:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Navigate to application directory
          cd /opt/drycleanershop
          
          # Pull latest changes
          git pull origin main
          
          # Update environment variables
          cp .env.production .env
          
          # Pull latest Docker image
          docker pull ${{ secrets.DOCKER_USERNAME }}/drycleanershop:latest
          
          # Stop existing containers
          docker-compose down
          
          # Start new containers
          docker-compose up -d
          
          # Run migrations
          docker-compose exec -T web python app/manage.py migrate
          
          # Collect static files
          docker-compose exec -T web python app/manage.py collectstatic --noinput
          
          # Restart nginx to reload
          docker-compose restart nginx
          
          # Clean up old images
          docker image prune -f

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          # Wait for application to start
          sleep 30
          
          # Check if containers are running
          docker-compose -f /opt/drycleanershop/docker-compose.yml ps
          
          # Test API endpoint
          curl -f http://localhost/api/auth/login/ || exit 1
          
          echo "Deployment successful!"

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      if: github.ref == 'refs/heads/main'
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi